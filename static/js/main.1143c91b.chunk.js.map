{"version":3,"sources":["Tile.js","Upload.js","Buttons.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","state","position","switchTile","bind","this","setState","tempObj","currentPosition","e","preventDefault","showMove","location","tileLoc","top","left","console","log","onClick","id","type","className","style","height","width","overflow","src","process","React","Component","Upload","class","for","Buttons","handleClick","randomize","Board","tilePositions","generateTilePositions","randomizeBoard","checkWin","i","obj","winPosition","parseInt","push","findMe","currentClicked","tempPositions","zeroObj","find","clickedObj","zpos","cpos","clickRow","clickCol","blankRow","blankCol","Math","abs","tmpLoc","tmp","p","arr","k","length","j","floor","random","temp","tally","alert","map","item","index","key","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1143c91b.chunk.js","sourcesContent":["import React from 'react'\nimport './Tile.css'\n\nclass Tile extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            position: -1,\n        \n        }\n        this.switchTile = this.switchTile.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({\n            position: this.props.tempObj.currentPosition,\n        })\n    }\n\n    componentDidUpdate() {\n    }\n\n    switchTile(e) {\n        e.preventDefault();\n        this.props.showMove(this.state.position)\n    }\n\n    render() {\n\n        let location = this.props.tempObj.tileLoc\n        let top = location[0] * -100\n        let left = location[1] * -100\n        console.log({top, left})\n\n        return (\n            <div onClick={this.switchTile} id={this.props.tempObj.type} className=\"col-md-3 col-3 border p-0 bg-secondary\" style={{height:100, width:100, overflow:\"hidden\"}}>\n                <img style={{top:top, left:left}} src={process.env.PUBLIC_URL + 'logo.svg'} />\n            </div>\n        )\n    }\n\n}\n\n    export default Tile\n","import React from 'react'\n\nclass Upload extends React.Component {\n    render() {\n        return (\n            <div>\n                <form>\n                    <div class=\"form-group\">\n                        <label for=\"exampleFormControlFile1\"></label>\n                        <input type=\"file\" class=\"form-control-file\" id=\"exampleFormControlFile1\"></input>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Upload\n","import React from 'react'\n\nclass Buttons extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleClick = this.handleClick.bind(this)\n    }\n   \n\n    handleClick(e){\n        e.preventDefault()\n        this.props.randomize()\n    }\n\n    render() {\n        return (\n            <div className=\"mt-5\" >\n                <button onClick={this.handleClick} type=\"button\" class=\"btn btn-secondary btn-md\">Scramble</button>\n            </div>\n        )\n    }\n}\n\nexport default Buttons","import React from 'react'\nimport Tile from './Tile'\nimport Upload from './Upload'\nimport Buttons from './Buttons'\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            tilePositions: [],\n        }\n        this.showMove = this.showMove.bind(this)\n        this.generateTilePositions = this.generateTilePositions.bind(this)\n        this.randomizeBoard = this.randomizeBoard.bind(this)\n        this.checkWin = this.checkWin.bind(this)\n    }\n\n    componentDidUpdate() {\n        this.checkWin()\n    }\n\n    componentDidMount() {\n        this.generateTilePositions()\n    }\n\n    generateTilePositions() {\n        let tilePositions = []\n\n        let boardSize = 16 //Let this be an available input for user to set size\n\n\n        for (let i = 0; i < boardSize; i++) {\n            \n            let clickRow = parseInt((i) / 4)\n            let clickCol = (i) % 4\n            let tileLoc = [clickRow, clickCol]\n            let obj = {\n                currentPosition: i,\n                winPosition: i,\n                type: \"regular\",\n                tileLoc: tileLoc\n            }\n            tilePositions.push(obj)\n        }\n\n       \n\n        let bpos = this.findMe(0, tilePositions);\n        tilePositions[bpos].type = \"blank\";\n        this.setState({\n            tilePositions: tilePositions,\n        })\n    }\n\n    showMove(currentClicked) {\n\n        let tempPositions = this.state.tilePositions\n        let zeroObj = this.state.tilePositions.find(i => i.currentPosition === 0)\n        let clickedObj = this.state.tilePositions[currentClicked]\n\n        let zpos = this.findMe(zeroObj.currentPosition, this.state.tilePositions);\n        let cpos = this.findMe(clickedObj.currentPosition, this.state.tilePositions);\n\n        let clickRow = parseInt((cpos) / 4)\n        let clickCol = (cpos) % 4\n\n        let blankRow = parseInt((zpos) / 4)\n        let blankCol = (zpos) % 4\n\n        let canSwitch = false;\n\n        if (clickRow === blankRow && Math.abs(blankCol - clickCol) === 1) {\n            canSwitch = true;\n        } else if (clickCol === blankCol && Math.abs(blankRow - clickRow) === 1) {\n            canSwitch = true;\n        } else {\n            canSwitch = false;\n        }\n        \n        if(canSwitch){\n\n            tempPositions[cpos].type = \"blank\";\n            tempPositions[zpos].type = \"regular\";\n\n            let tmpLoc = tempPositions[cpos].tileLoc;\n            tempPositions[cpos].tileLoc = zeroObj.tileLoc\n            tempPositions[zpos].tileLoc = tmpLoc\n\n            let tmp = tempPositions[cpos].currentPosition;\n            tempPositions[cpos].currentPosition = zeroObj.currentPosition;\n            tempPositions[zpos].currentPosition = tmp;\n\n            this.setState({\n                tilePositions: tempPositions,\n            })\n        }\n     \n    }\n\n    findMe(p, arr){\n        let k = 0;\n        for (let i = 0; i < arr.length; i++){\n            if(arr[i].currentPosition === p){\n                k = i;\n                break;\n            }\n        }\n        return k;\n    }\n\n    randomizeBoard() {\n       \n        let tempPositions = this.state.tilePositions\n\n        for (let i = tempPositions.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i)\n            const temp = tempPositions[i].tileLoc\n            tempPositions[i].tileLoc = tempPositions[j].tileLoc\n            tempPositions[j].tileLoc = temp\n            tempPositions[i].type = \"regular\";\n            tempPositions[j].type = \"regular\";\n        }\n\n        let bpos = this.findMe(0, tempPositions);\n        tempPositions[bpos].type = \"blank\";\n\n        this.setState({\n            tilePositions: tempPositions\n        })\n    }\n\n    async checkWin() {\n        let tally = 0\n        for (let i = 0; i < this.state.tilePositions.length; i++) {\n            if (this.state.tilePositions[i].currentPosition === this.state.tilePositions[i].winPosition) {\n                tally = tally + 1\n            }\n        }\n         if (tally === 16) {\n            await alert(\"winner\")\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-4 offset-4 col-sm-12\">\n                        <Upload />\n                    </div>\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-md-6 offset-3 col-6\">\n                        <div id=\"grid\" className=\"row border border-secondary\" style={{width:400}}>\n                            {this.state.tilePositions.map((item, index) => (\n                                <Tile\n                                    key={index}\n                                    tempObj={item}\n                                    showMove={this.showMove}\n                                    id={index}\n                                />\n                            ))}\n                        </div>\n                    </div>\n                </div>\n                <Buttons\n                    randomize={this.randomizeBoard}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Board\n","import React from 'react';\nimport './App.css';\nimport Board from './Board'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"container mt-3 mb-5\">\n      <div className=\"App\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}